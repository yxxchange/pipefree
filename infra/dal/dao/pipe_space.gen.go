// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newPipeSpace(db *gorm.DB, opts ...gen.DOOption) pipeSpace {
	_pipeSpace := pipeSpace{}

	_pipeSpace.pipeSpaceDo.UseDB(db, opts...)
	_pipeSpace.pipeSpaceDo.UseModel(&model.PipeSpace{})

	tableName := _pipeSpace.pipeSpaceDo.TableName()
	_pipeSpace.ALL = field.NewAsterisk(tableName)
	_pipeSpace.Id = field.NewInt64(tableName, "id")
	_pipeSpace.CreatedAt = field.NewInt64(tableName, "created_at")
	_pipeSpace.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pipeSpace.IsDel = field.NewBool(tableName, "is_del")
	_pipeSpace.Space = field.NewString(tableName, "space")

	_pipeSpace.fillFieldMap()

	return _pipeSpace
}

type pipeSpace struct {
	pipeSpaceDo pipeSpaceDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	IsDel     field.Bool
	Space     field.String

	fieldMap map[string]field.Expr
}

func (p pipeSpace) Table(newTableName string) *pipeSpace {
	p.pipeSpaceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pipeSpace) As(alias string) *pipeSpace {
	p.pipeSpaceDo.DO = *(p.pipeSpaceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pipeSpace) updateTableName(table string) *pipeSpace {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewInt64(table, "id")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.IsDel = field.NewBool(table, "is_del")
	p.Space = field.NewString(table, "space")

	p.fillFieldMap()

	return p
}

func (p *pipeSpace) WithContext(ctx context.Context) IPipeSpaceDo {
	return p.pipeSpaceDo.WithContext(ctx)
}

func (p pipeSpace) TableName() string { return p.pipeSpaceDo.TableName() }

func (p pipeSpace) Alias() string { return p.pipeSpaceDo.Alias() }

func (p pipeSpace) Columns(cols ...field.Expr) gen.Columns { return p.pipeSpaceDo.Columns(cols...) }

func (p *pipeSpace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pipeSpace) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.Id
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["space"] = p.Space
}

func (p pipeSpace) clone(db *gorm.DB) pipeSpace {
	p.pipeSpaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pipeSpace) replaceDB(db *gorm.DB) pipeSpace {
	p.pipeSpaceDo.ReplaceDB(db)
	return p
}

type pipeSpaceDo struct{ gen.DO }

type IPipeSpaceDo interface {
	gen.SubQuery
	Debug() IPipeSpaceDo
	WithContext(ctx context.Context) IPipeSpaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPipeSpaceDo
	WriteDB() IPipeSpaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPipeSpaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPipeSpaceDo
	Not(conds ...gen.Condition) IPipeSpaceDo
	Or(conds ...gen.Condition) IPipeSpaceDo
	Select(conds ...field.Expr) IPipeSpaceDo
	Where(conds ...gen.Condition) IPipeSpaceDo
	Order(conds ...field.Expr) IPipeSpaceDo
	Distinct(cols ...field.Expr) IPipeSpaceDo
	Omit(cols ...field.Expr) IPipeSpaceDo
	Join(table schema.Tabler, on ...field.Expr) IPipeSpaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPipeSpaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPipeSpaceDo
	Group(cols ...field.Expr) IPipeSpaceDo
	Having(conds ...gen.Condition) IPipeSpaceDo
	Limit(limit int) IPipeSpaceDo
	Offset(offset int) IPipeSpaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeSpaceDo
	Unscoped() IPipeSpaceDo
	Create(values ...*model.PipeSpace) error
	CreateInBatches(values []*model.PipeSpace, batchSize int) error
	Save(values ...*model.PipeSpace) error
	First() (*model.PipeSpace, error)
	Take() (*model.PipeSpace, error)
	Last() (*model.PipeSpace, error)
	Find() ([]*model.PipeSpace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeSpace, err error)
	FindInBatches(result *[]*model.PipeSpace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PipeSpace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPipeSpaceDo
	Assign(attrs ...field.AssignExpr) IPipeSpaceDo
	Joins(fields ...field.RelationField) IPipeSpaceDo
	Preload(fields ...field.RelationField) IPipeSpaceDo
	FirstOrInit() (*model.PipeSpace, error)
	FirstOrCreate() (*model.PipeSpace, error)
	FindByPage(offset int, limit int) (result []*model.PipeSpace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPipeSpaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pipeSpaceDo) Debug() IPipeSpaceDo {
	return p.withDO(p.DO.Debug())
}

func (p pipeSpaceDo) WithContext(ctx context.Context) IPipeSpaceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pipeSpaceDo) ReadDB() IPipeSpaceDo {
	return p.Clauses(dbresolver.Read)
}

func (p pipeSpaceDo) WriteDB() IPipeSpaceDo {
	return p.Clauses(dbresolver.Write)
}

func (p pipeSpaceDo) Session(config *gorm.Session) IPipeSpaceDo {
	return p.withDO(p.DO.Session(config))
}

func (p pipeSpaceDo) Clauses(conds ...clause.Expression) IPipeSpaceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pipeSpaceDo) Returning(value interface{}, columns ...string) IPipeSpaceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pipeSpaceDo) Not(conds ...gen.Condition) IPipeSpaceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pipeSpaceDo) Or(conds ...gen.Condition) IPipeSpaceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pipeSpaceDo) Select(conds ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pipeSpaceDo) Where(conds ...gen.Condition) IPipeSpaceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pipeSpaceDo) Order(conds ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pipeSpaceDo) Distinct(cols ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pipeSpaceDo) Omit(cols ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pipeSpaceDo) Join(table schema.Tabler, on ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pipeSpaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pipeSpaceDo) RightJoin(table schema.Tabler, on ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pipeSpaceDo) Group(cols ...field.Expr) IPipeSpaceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pipeSpaceDo) Having(conds ...gen.Condition) IPipeSpaceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pipeSpaceDo) Limit(limit int) IPipeSpaceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pipeSpaceDo) Offset(offset int) IPipeSpaceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pipeSpaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeSpaceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pipeSpaceDo) Unscoped() IPipeSpaceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pipeSpaceDo) Create(values ...*model.PipeSpace) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pipeSpaceDo) CreateInBatches(values []*model.PipeSpace, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pipeSpaceDo) Save(values ...*model.PipeSpace) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pipeSpaceDo) First() (*model.PipeSpace, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeSpace), nil
	}
}

func (p pipeSpaceDo) Take() (*model.PipeSpace, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeSpace), nil
	}
}

func (p pipeSpaceDo) Last() (*model.PipeSpace, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeSpace), nil
	}
}

func (p pipeSpaceDo) Find() ([]*model.PipeSpace, error) {
	result, err := p.DO.Find()
	return result.([]*model.PipeSpace), err
}

func (p pipeSpaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeSpace, err error) {
	buf := make([]*model.PipeSpace, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pipeSpaceDo) FindInBatches(result *[]*model.PipeSpace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pipeSpaceDo) Attrs(attrs ...field.AssignExpr) IPipeSpaceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pipeSpaceDo) Assign(attrs ...field.AssignExpr) IPipeSpaceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pipeSpaceDo) Joins(fields ...field.RelationField) IPipeSpaceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pipeSpaceDo) Preload(fields ...field.RelationField) IPipeSpaceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pipeSpaceDo) FirstOrInit() (*model.PipeSpace, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeSpace), nil
	}
}

func (p pipeSpaceDo) FirstOrCreate() (*model.PipeSpace, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeSpace), nil
	}
}

func (p pipeSpaceDo) FindByPage(offset int, limit int) (result []*model.PipeSpace, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pipeSpaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pipeSpaceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pipeSpaceDo) Delete(models ...*model.PipeSpace) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pipeSpaceDo) withDO(do gen.Dao) *pipeSpaceDo {
	p.DO = *do.(*gen.DO)
	return p
}
