// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newPermissionItem(db *gorm.DB, opts ...gen.DOOption) permissionItem {
	_permissionItem := permissionItem{}

	_permissionItem.permissionItemDo.UseDB(db, opts...)
	_permissionItem.permissionItemDo.UseModel(&model.PermissionItem{})

	tableName := _permissionItem.permissionItemDo.TableName()
	_permissionItem.ALL = field.NewAsterisk(tableName)
	_permissionItem.Id = field.NewInt64(tableName, "id")
	_permissionItem.CreatedAt = field.NewInt64(tableName, "created_at")
	_permissionItem.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_permissionItem.IsDel = field.NewBool(tableName, "is_del")
	_permissionItem.SpaceId = field.NewInt64(tableName, "space_id")
	_permissionItem.Space = field.NewString(tableName, "space")
	_permissionItem.NamespaceId = field.NewInt64(tableName, "namespace_id")
	_permissionItem.Namespace = field.NewString(tableName, "namespace")
	_permissionItem.PermissionInstance = field.NewString(tableName, "permission_instance")

	_permissionItem.fillFieldMap()

	return _permissionItem
}

type permissionItem struct {
	permissionItemDo permissionItemDo

	ALL                field.Asterisk
	Id                 field.Int64
	CreatedAt          field.Int64
	UpdatedAt          field.Int64
	IsDel              field.Bool
	SpaceId            field.Int64
	Space              field.String
	NamespaceId        field.Int64
	Namespace          field.String
	PermissionInstance field.String

	fieldMap map[string]field.Expr
}

func (p permissionItem) Table(newTableName string) *permissionItem {
	p.permissionItemDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p permissionItem) As(alias string) *permissionItem {
	p.permissionItemDo.DO = *(p.permissionItemDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *permissionItem) updateTableName(table string) *permissionItem {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewInt64(table, "id")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.IsDel = field.NewBool(table, "is_del")
	p.SpaceId = field.NewInt64(table, "space_id")
	p.Space = field.NewString(table, "space")
	p.NamespaceId = field.NewInt64(table, "namespace_id")
	p.Namespace = field.NewString(table, "namespace")
	p.PermissionInstance = field.NewString(table, "permission_instance")

	p.fillFieldMap()

	return p
}

func (p *permissionItem) WithContext(ctx context.Context) IPermissionItemDo {
	return p.permissionItemDo.WithContext(ctx)
}

func (p permissionItem) TableName() string { return p.permissionItemDo.TableName() }

func (p permissionItem) Alias() string { return p.permissionItemDo.Alias() }

func (p permissionItem) Columns(cols ...field.Expr) gen.Columns {
	return p.permissionItemDo.Columns(cols...)
}

func (p *permissionItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *permissionItem) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.Id
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["space_id"] = p.SpaceId
	p.fieldMap["space"] = p.Space
	p.fieldMap["namespace_id"] = p.NamespaceId
	p.fieldMap["namespace"] = p.Namespace
	p.fieldMap["permission_instance"] = p.PermissionInstance
}

func (p permissionItem) clone(db *gorm.DB) permissionItem {
	p.permissionItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p permissionItem) replaceDB(db *gorm.DB) permissionItem {
	p.permissionItemDo.ReplaceDB(db)
	return p
}

type permissionItemDo struct{ gen.DO }

type IPermissionItemDo interface {
	gen.SubQuery
	Debug() IPermissionItemDo
	WithContext(ctx context.Context) IPermissionItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPermissionItemDo
	WriteDB() IPermissionItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPermissionItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPermissionItemDo
	Not(conds ...gen.Condition) IPermissionItemDo
	Or(conds ...gen.Condition) IPermissionItemDo
	Select(conds ...field.Expr) IPermissionItemDo
	Where(conds ...gen.Condition) IPermissionItemDo
	Order(conds ...field.Expr) IPermissionItemDo
	Distinct(cols ...field.Expr) IPermissionItemDo
	Omit(cols ...field.Expr) IPermissionItemDo
	Join(table schema.Tabler, on ...field.Expr) IPermissionItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPermissionItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPermissionItemDo
	Group(cols ...field.Expr) IPermissionItemDo
	Having(conds ...gen.Condition) IPermissionItemDo
	Limit(limit int) IPermissionItemDo
	Offset(offset int) IPermissionItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPermissionItemDo
	Unscoped() IPermissionItemDo
	Create(values ...*model.PermissionItem) error
	CreateInBatches(values []*model.PermissionItem, batchSize int) error
	Save(values ...*model.PermissionItem) error
	First() (*model.PermissionItem, error)
	Take() (*model.PermissionItem, error)
	Last() (*model.PermissionItem, error)
	Find() ([]*model.PermissionItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PermissionItem, err error)
	FindInBatches(result *[]*model.PermissionItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PermissionItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPermissionItemDo
	Assign(attrs ...field.AssignExpr) IPermissionItemDo
	Joins(fields ...field.RelationField) IPermissionItemDo
	Preload(fields ...field.RelationField) IPermissionItemDo
	FirstOrInit() (*model.PermissionItem, error)
	FirstOrCreate() (*model.PermissionItem, error)
	FindByPage(offset int, limit int) (result []*model.PermissionItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPermissionItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p permissionItemDo) Debug() IPermissionItemDo {
	return p.withDO(p.DO.Debug())
}

func (p permissionItemDo) WithContext(ctx context.Context) IPermissionItemDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permissionItemDo) ReadDB() IPermissionItemDo {
	return p.Clauses(dbresolver.Read)
}

func (p permissionItemDo) WriteDB() IPermissionItemDo {
	return p.Clauses(dbresolver.Write)
}

func (p permissionItemDo) Session(config *gorm.Session) IPermissionItemDo {
	return p.withDO(p.DO.Session(config))
}

func (p permissionItemDo) Clauses(conds ...clause.Expression) IPermissionItemDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permissionItemDo) Returning(value interface{}, columns ...string) IPermissionItemDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p permissionItemDo) Not(conds ...gen.Condition) IPermissionItemDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permissionItemDo) Or(conds ...gen.Condition) IPermissionItemDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permissionItemDo) Select(conds ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permissionItemDo) Where(conds ...gen.Condition) IPermissionItemDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permissionItemDo) Order(conds ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permissionItemDo) Distinct(cols ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permissionItemDo) Omit(cols ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permissionItemDo) Join(table schema.Tabler, on ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permissionItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permissionItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permissionItemDo) Group(cols ...field.Expr) IPermissionItemDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permissionItemDo) Having(conds ...gen.Condition) IPermissionItemDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permissionItemDo) Limit(limit int) IPermissionItemDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permissionItemDo) Offset(offset int) IPermissionItemDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permissionItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPermissionItemDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permissionItemDo) Unscoped() IPermissionItemDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permissionItemDo) Create(values ...*model.PermissionItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permissionItemDo) CreateInBatches(values []*model.PermissionItem, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permissionItemDo) Save(values ...*model.PermissionItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permissionItemDo) First() (*model.PermissionItem, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionItem), nil
	}
}

func (p permissionItemDo) Take() (*model.PermissionItem, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionItem), nil
	}
}

func (p permissionItemDo) Last() (*model.PermissionItem, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionItem), nil
	}
}

func (p permissionItemDo) Find() ([]*model.PermissionItem, error) {
	result, err := p.DO.Find()
	return result.([]*model.PermissionItem), err
}

func (p permissionItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PermissionItem, err error) {
	buf := make([]*model.PermissionItem, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permissionItemDo) FindInBatches(result *[]*model.PermissionItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permissionItemDo) Attrs(attrs ...field.AssignExpr) IPermissionItemDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permissionItemDo) Assign(attrs ...field.AssignExpr) IPermissionItemDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permissionItemDo) Joins(fields ...field.RelationField) IPermissionItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p permissionItemDo) Preload(fields ...field.RelationField) IPermissionItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p permissionItemDo) FirstOrInit() (*model.PermissionItem, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionItem), nil
	}
}

func (p permissionItemDo) FirstOrCreate() (*model.PermissionItem, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionItem), nil
	}
}

func (p permissionItemDo) FindByPage(offset int, limit int) (result []*model.PermissionItem, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p permissionItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p permissionItemDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p permissionItemDo) Delete(models ...*model.PermissionItem) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *permissionItemDo) withDO(do gen.Dao) *permissionItemDo {
	p.DO = *do.(*gen.DO)
	return p
}
