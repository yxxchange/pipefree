// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newPipeVersion(db *gorm.DB, opts ...gen.DOOption) pipeVersion {
	_pipeVersion := pipeVersion{}

	_pipeVersion.pipeVersionDo.UseDB(db, opts...)
	_pipeVersion.pipeVersionDo.UseModel(&model.PipeVersion{})

	tableName := _pipeVersion.pipeVersionDo.TableName()
	_pipeVersion.ALL = field.NewAsterisk(tableName)
	_pipeVersion.Id = field.NewInt64(tableName, "id")
	_pipeVersion.CreatedAt = field.NewInt64(tableName, "created_at")
	_pipeVersion.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pipeVersion.IsDel = field.NewBool(tableName, "is_del")
	_pipeVersion.PipeCfgId = field.NewInt64(tableName, "pipe_cfg_id")
	_pipeVersion.Version = field.NewInt(tableName, "version")
	_pipeVersion.Config = field.NewField(tableName, "pipe_cfg")

	_pipeVersion.fillFieldMap()

	return _pipeVersion
}

type pipeVersion struct {
	pipeVersionDo pipeVersionDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	IsDel     field.Bool
	PipeCfgId field.Int64
	Version   field.Int
	Config    field.Field

	fieldMap map[string]field.Expr
}

func (p pipeVersion) Table(newTableName string) *pipeVersion {
	p.pipeVersionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pipeVersion) As(alias string) *pipeVersion {
	p.pipeVersionDo.DO = *(p.pipeVersionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pipeVersion) updateTableName(table string) *pipeVersion {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewInt64(table, "id")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.IsDel = field.NewBool(table, "is_del")
	p.PipeCfgId = field.NewInt64(table, "pipe_cfg_id")
	p.Version = field.NewInt(table, "version")
	p.Config = field.NewField(table, "pipe_cfg")

	p.fillFieldMap()

	return p
}

func (p *pipeVersion) WithContext(ctx context.Context) IPipeVersionDo {
	return p.pipeVersionDo.WithContext(ctx)
}

func (p pipeVersion) TableName() string { return p.pipeVersionDo.TableName() }

func (p pipeVersion) Alias() string { return p.pipeVersionDo.Alias() }

func (p pipeVersion) Columns(cols ...field.Expr) gen.Columns { return p.pipeVersionDo.Columns(cols...) }

func (p *pipeVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pipeVersion) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.Id
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["pipe_cfg_id"] = p.PipeCfgId
	p.fieldMap["version"] = p.Version
	p.fieldMap["pipe_cfg"] = p.Config
}

func (p pipeVersion) clone(db *gorm.DB) pipeVersion {
	p.pipeVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pipeVersion) replaceDB(db *gorm.DB) pipeVersion {
	p.pipeVersionDo.ReplaceDB(db)
	return p
}

type pipeVersionDo struct{ gen.DO }

type IPipeVersionDo interface {
	gen.SubQuery
	Debug() IPipeVersionDo
	WithContext(ctx context.Context) IPipeVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPipeVersionDo
	WriteDB() IPipeVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPipeVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPipeVersionDo
	Not(conds ...gen.Condition) IPipeVersionDo
	Or(conds ...gen.Condition) IPipeVersionDo
	Select(conds ...field.Expr) IPipeVersionDo
	Where(conds ...gen.Condition) IPipeVersionDo
	Order(conds ...field.Expr) IPipeVersionDo
	Distinct(cols ...field.Expr) IPipeVersionDo
	Omit(cols ...field.Expr) IPipeVersionDo
	Join(table schema.Tabler, on ...field.Expr) IPipeVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPipeVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPipeVersionDo
	Group(cols ...field.Expr) IPipeVersionDo
	Having(conds ...gen.Condition) IPipeVersionDo
	Limit(limit int) IPipeVersionDo
	Offset(offset int) IPipeVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeVersionDo
	Unscoped() IPipeVersionDo
	Create(values ...*model.PipeVersion) error
	CreateInBatches(values []*model.PipeVersion, batchSize int) error
	Save(values ...*model.PipeVersion) error
	First() (*model.PipeVersion, error)
	Take() (*model.PipeVersion, error)
	Last() (*model.PipeVersion, error)
	Find() ([]*model.PipeVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeVersion, err error)
	FindInBatches(result *[]*model.PipeVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PipeVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPipeVersionDo
	Assign(attrs ...field.AssignExpr) IPipeVersionDo
	Joins(fields ...field.RelationField) IPipeVersionDo
	Preload(fields ...field.RelationField) IPipeVersionDo
	FirstOrInit() (*model.PipeVersion, error)
	FirstOrCreate() (*model.PipeVersion, error)
	FindByPage(offset int, limit int) (result []*model.PipeVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPipeVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pipeVersionDo) Debug() IPipeVersionDo {
	return p.withDO(p.DO.Debug())
}

func (p pipeVersionDo) WithContext(ctx context.Context) IPipeVersionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pipeVersionDo) ReadDB() IPipeVersionDo {
	return p.Clauses(dbresolver.Read)
}

func (p pipeVersionDo) WriteDB() IPipeVersionDo {
	return p.Clauses(dbresolver.Write)
}

func (p pipeVersionDo) Session(config *gorm.Session) IPipeVersionDo {
	return p.withDO(p.DO.Session(config))
}

func (p pipeVersionDo) Clauses(conds ...clause.Expression) IPipeVersionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pipeVersionDo) Returning(value interface{}, columns ...string) IPipeVersionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pipeVersionDo) Not(conds ...gen.Condition) IPipeVersionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pipeVersionDo) Or(conds ...gen.Condition) IPipeVersionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pipeVersionDo) Select(conds ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pipeVersionDo) Where(conds ...gen.Condition) IPipeVersionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pipeVersionDo) Order(conds ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pipeVersionDo) Distinct(cols ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pipeVersionDo) Omit(cols ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pipeVersionDo) Join(table schema.Tabler, on ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pipeVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pipeVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pipeVersionDo) Group(cols ...field.Expr) IPipeVersionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pipeVersionDo) Having(conds ...gen.Condition) IPipeVersionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pipeVersionDo) Limit(limit int) IPipeVersionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pipeVersionDo) Offset(offset int) IPipeVersionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pipeVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeVersionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pipeVersionDo) Unscoped() IPipeVersionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pipeVersionDo) Create(values ...*model.PipeVersion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pipeVersionDo) CreateInBatches(values []*model.PipeVersion, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pipeVersionDo) Save(values ...*model.PipeVersion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pipeVersionDo) First() (*model.PipeVersion, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeVersion), nil
	}
}

func (p pipeVersionDo) Take() (*model.PipeVersion, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeVersion), nil
	}
}

func (p pipeVersionDo) Last() (*model.PipeVersion, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeVersion), nil
	}
}

func (p pipeVersionDo) Find() ([]*model.PipeVersion, error) {
	result, err := p.DO.Find()
	return result.([]*model.PipeVersion), err
}

func (p pipeVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeVersion, err error) {
	buf := make([]*model.PipeVersion, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pipeVersionDo) FindInBatches(result *[]*model.PipeVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pipeVersionDo) Attrs(attrs ...field.AssignExpr) IPipeVersionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pipeVersionDo) Assign(attrs ...field.AssignExpr) IPipeVersionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pipeVersionDo) Joins(fields ...field.RelationField) IPipeVersionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pipeVersionDo) Preload(fields ...field.RelationField) IPipeVersionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pipeVersionDo) FirstOrInit() (*model.PipeVersion, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeVersion), nil
	}
}

func (p pipeVersionDo) FirstOrCreate() (*model.PipeVersion, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeVersion), nil
	}
}

func (p pipeVersionDo) FindByPage(offset int, limit int) (result []*model.PipeVersion, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pipeVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pipeVersionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pipeVersionDo) Delete(models ...*model.PipeVersion) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pipeVersionDo) withDO(do gen.Dao) *pipeVersionDo {
	p.DO = *do.(*gen.DO)
	return p
}
