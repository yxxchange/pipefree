// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newNodeExec(db *gorm.DB, opts ...gen.DOOption) nodeExec {
	_nodeExec := nodeExec{}

	_nodeExec.nodeExecDo.UseDB(db, opts...)
	_nodeExec.nodeExecDo.UseModel(&model.NodeExec{})

	tableName := _nodeExec.nodeExecDo.TableName()
	_nodeExec.ALL = field.NewAsterisk(tableName)
	_nodeExec.Id = field.NewInt64(tableName, "id")
	_nodeExec.CreatedAt = field.NewInt64(tableName, "created_at")
	_nodeExec.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_nodeExec.IsDel = field.NewBool(tableName, "is_del")
	_nodeExec.Name = field.NewString(tableName, "name")
	_nodeExec.NodeCfgId = field.NewInt64(tableName, "node_cfg_id")
	_nodeExec.PipeCfgId = field.NewInt64(tableName, "pipe_cfg_id")
	_nodeExec.PipeExecId = field.NewInt64(tableName, "pipe_exec_id")
	_nodeExec.InDegree = field.NewInt(tableName, "in_degree")
	_nodeExec.Spec = field.NewBytes(tableName, "spec")
	_nodeExec.Phase = field.NewField(tableName, "status")

	_nodeExec.fillFieldMap()

	return _nodeExec
}

type nodeExec struct {
	nodeExecDo nodeExecDo

	ALL        field.Asterisk
	Id         field.Int64
	CreatedAt  field.Int64
	UpdatedAt  field.Int64
	IsDel      field.Bool
	Name       field.String
	NodeCfgId  field.Int64
	PipeCfgId  field.Int64
	PipeExecId field.Int64
	InDegree   field.Int
	Spec       field.Bytes
	Phase      field.Field

	fieldMap map[string]field.Expr
}

func (n nodeExec) Table(newTableName string) *nodeExec {
	n.nodeExecDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeExec) As(alias string) *nodeExec {
	n.nodeExecDo.DO = *(n.nodeExecDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeExec) updateTableName(table string) *nodeExec {
	n.ALL = field.NewAsterisk(table)
	n.Id = field.NewInt64(table, "id")
	n.CreatedAt = field.NewInt64(table, "created_at")
	n.UpdatedAt = field.NewInt64(table, "updated_at")
	n.IsDel = field.NewBool(table, "is_del")
	n.Name = field.NewString(table, "name")
	n.NodeCfgId = field.NewInt64(table, "node_cfg_id")
	n.PipeCfgId = field.NewInt64(table, "pipe_cfg_id")
	n.PipeExecId = field.NewInt64(table, "pipe_exec_id")
	n.InDegree = field.NewInt(table, "in_degree")
	n.Spec = field.NewBytes(table, "spec")
	n.Phase = field.NewField(table, "status")

	n.fillFieldMap()

	return n
}

func (n *nodeExec) WithContext(ctx context.Context) INodeExecDo { return n.nodeExecDo.WithContext(ctx) }

func (n nodeExec) TableName() string { return n.nodeExecDo.TableName() }

func (n nodeExec) Alias() string { return n.nodeExecDo.Alias() }

func (n nodeExec) Columns(cols ...field.Expr) gen.Columns { return n.nodeExecDo.Columns(cols...) }

func (n *nodeExec) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeExec) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 11)
	n.fieldMap["id"] = n.Id
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["is_del"] = n.IsDel
	n.fieldMap["name"] = n.Name
	n.fieldMap["node_cfg_id"] = n.NodeCfgId
	n.fieldMap["pipe_cfg_id"] = n.PipeCfgId
	n.fieldMap["pipe_exec_id"] = n.PipeExecId
	n.fieldMap["in_degree"] = n.InDegree
	n.fieldMap["spec"] = n.Spec
	n.fieldMap["status"] = n.Phase
}

func (n nodeExec) clone(db *gorm.DB) nodeExec {
	n.nodeExecDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeExec) replaceDB(db *gorm.DB) nodeExec {
	n.nodeExecDo.ReplaceDB(db)
	return n
}

type nodeExecDo struct{ gen.DO }

type INodeExecDo interface {
	gen.SubQuery
	Debug() INodeExecDo
	WithContext(ctx context.Context) INodeExecDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeExecDo
	WriteDB() INodeExecDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeExecDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeExecDo
	Not(conds ...gen.Condition) INodeExecDo
	Or(conds ...gen.Condition) INodeExecDo
	Select(conds ...field.Expr) INodeExecDo
	Where(conds ...gen.Condition) INodeExecDo
	Order(conds ...field.Expr) INodeExecDo
	Distinct(cols ...field.Expr) INodeExecDo
	Omit(cols ...field.Expr) INodeExecDo
	Join(table schema.Tabler, on ...field.Expr) INodeExecDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeExecDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeExecDo
	Group(cols ...field.Expr) INodeExecDo
	Having(conds ...gen.Condition) INodeExecDo
	Limit(limit int) INodeExecDo
	Offset(offset int) INodeExecDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeExecDo
	Unscoped() INodeExecDo
	Create(values ...*model.NodeExec) error
	CreateInBatches(values []*model.NodeExec, batchSize int) error
	Save(values ...*model.NodeExec) error
	First() (*model.NodeExec, error)
	Take() (*model.NodeExec, error)
	Last() (*model.NodeExec, error)
	Find() ([]*model.NodeExec, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeExec, err error)
	FindInBatches(result *[]*model.NodeExec, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeExec) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeExecDo
	Assign(attrs ...field.AssignExpr) INodeExecDo
	Joins(fields ...field.RelationField) INodeExecDo
	Preload(fields ...field.RelationField) INodeExecDo
	FirstOrInit() (*model.NodeExec, error)
	FirstOrCreate() (*model.NodeExec, error)
	FindByPage(offset int, limit int) (result []*model.NodeExec, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeExecDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeExecDo) Debug() INodeExecDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeExecDo) WithContext(ctx context.Context) INodeExecDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeExecDo) ReadDB() INodeExecDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeExecDo) WriteDB() INodeExecDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeExecDo) Session(config *gorm.Session) INodeExecDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeExecDo) Clauses(conds ...clause.Expression) INodeExecDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeExecDo) Returning(value interface{}, columns ...string) INodeExecDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeExecDo) Not(conds ...gen.Condition) INodeExecDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeExecDo) Or(conds ...gen.Condition) INodeExecDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeExecDo) Select(conds ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeExecDo) Where(conds ...gen.Condition) INodeExecDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeExecDo) Order(conds ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeExecDo) Distinct(cols ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeExecDo) Omit(cols ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeExecDo) Join(table schema.Tabler, on ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeExecDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeExecDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeExecDo) Group(cols ...field.Expr) INodeExecDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeExecDo) Having(conds ...gen.Condition) INodeExecDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeExecDo) Limit(limit int) INodeExecDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeExecDo) Offset(offset int) INodeExecDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeExecDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeExecDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeExecDo) Unscoped() INodeExecDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeExecDo) Create(values ...*model.NodeExec) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeExecDo) CreateInBatches(values []*model.NodeExec, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeExecDo) Save(values ...*model.NodeExec) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeExecDo) First() (*model.NodeExec, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeExec), nil
	}
}

func (n nodeExecDo) Take() (*model.NodeExec, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeExec), nil
	}
}

func (n nodeExecDo) Last() (*model.NodeExec, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeExec), nil
	}
}

func (n nodeExecDo) Find() ([]*model.NodeExec, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeExec), err
}

func (n nodeExecDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeExec, err error) {
	buf := make([]*model.NodeExec, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeExecDo) FindInBatches(result *[]*model.NodeExec, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeExecDo) Attrs(attrs ...field.AssignExpr) INodeExecDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeExecDo) Assign(attrs ...field.AssignExpr) INodeExecDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeExecDo) Joins(fields ...field.RelationField) INodeExecDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeExecDo) Preload(fields ...field.RelationField) INodeExecDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeExecDo) FirstOrInit() (*model.NodeExec, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeExec), nil
	}
}

func (n nodeExecDo) FirstOrCreate() (*model.NodeExec, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeExec), nil
	}
}

func (n nodeExecDo) FindByPage(offset int, limit int) (result []*model.NodeExec, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeExecDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeExecDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeExecDo) Delete(models ...*model.NodeExec) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeExecDo) withDO(do gen.Dao) *nodeExecDo {
	n.DO = *do.(*gen.DO)
	return n
}
