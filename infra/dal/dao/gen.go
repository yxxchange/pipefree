// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	NodeCfg     *nodeCfg
	NodeExec    *nodeExec
	PipeCfg     *pipeCfg
	PipeExec    *pipeExec
	PipeVersion *pipeVersion
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	NodeCfg = &Q.NodeCfg
	NodeExec = &Q.NodeExec
	PipeCfg = &Q.PipeCfg
	PipeExec = &Q.PipeExec
	PipeVersion = &Q.PipeVersion
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		NodeCfg:     newNodeCfg(db, opts...),
		NodeExec:    newNodeExec(db, opts...),
		PipeCfg:     newPipeCfg(db, opts...),
		PipeExec:    newPipeExec(db, opts...),
		PipeVersion: newPipeVersion(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	NodeCfg     nodeCfg
	NodeExec    nodeExec
	PipeCfg     pipeCfg
	PipeExec    pipeExec
	PipeVersion pipeVersion
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		NodeCfg:     q.NodeCfg.clone(db),
		NodeExec:    q.NodeExec.clone(db),
		PipeCfg:     q.PipeCfg.clone(db),
		PipeExec:    q.PipeExec.clone(db),
		PipeVersion: q.PipeVersion.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		NodeCfg:     q.NodeCfg.replaceDB(db),
		NodeExec:    q.NodeExec.replaceDB(db),
		PipeCfg:     q.PipeCfg.replaceDB(db),
		PipeExec:    q.PipeExec.replaceDB(db),
		PipeVersion: q.PipeVersion.replaceDB(db),
	}
}

type queryCtx struct {
	NodeCfg     INodeCfgDo
	NodeExec    INodeExecDo
	PipeCfg     IPipeCfgDo
	PipeExec    IPipeExecDo
	PipeVersion IPipeVersionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		NodeCfg:     q.NodeCfg.WithContext(ctx),
		NodeExec:    q.NodeExec.WithContext(ctx),
		PipeCfg:     q.PipeCfg.WithContext(ctx),
		PipeExec:    q.PipeExec.WithContext(ctx),
		PipeVersion: q.PipeVersion.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
