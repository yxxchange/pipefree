// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newPipeCfg(db *gorm.DB, opts ...gen.DOOption) pipeCfg {
	_pipeCfg := pipeCfg{}

	_pipeCfg.pipeCfgDo.UseDB(db, opts...)
	_pipeCfg.pipeCfgDo.UseModel(&model.PipeCfg{})

	tableName := _pipeCfg.pipeCfgDo.TableName()
	_pipeCfg.ALL = field.NewAsterisk(tableName)
	_pipeCfg.Id = field.NewInt64(tableName, "id")
	_pipeCfg.CreatedAt = field.NewInt64(tableName, "created_at")
	_pipeCfg.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pipeCfg.IsDel = field.NewBool(tableName, "is_del")
	_pipeCfg.Name = field.NewString(tableName, "name")
	_pipeCfg.Space = field.NewString(tableName, "space")
	_pipeCfg.Desc = field.NewString(tableName, "desc")
	_pipeCfg.Version = field.NewInt(tableName, "version")
	_pipeCfg.EnvVars = field.NewField(tableName, "env_vars")
	_pipeCfg.Graph = field.NewField(tableName, "graph")

	_pipeCfg.fillFieldMap()

	return _pipeCfg
}

type pipeCfg struct {
	pipeCfgDo pipeCfgDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	IsDel     field.Bool
	Name      field.String
	Space     field.String
	Desc      field.String
	Version   field.Int
	EnvVars   field.Field
	Graph     field.Field

	fieldMap map[string]field.Expr
}

func (p pipeCfg) Table(newTableName string) *pipeCfg {
	p.pipeCfgDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pipeCfg) As(alias string) *pipeCfg {
	p.pipeCfgDo.DO = *(p.pipeCfgDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pipeCfg) updateTableName(table string) *pipeCfg {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewInt64(table, "id")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.IsDel = field.NewBool(table, "is_del")
	p.Name = field.NewString(table, "name")
	p.Space = field.NewString(table, "space")
	p.Desc = field.NewString(table, "desc")
	p.Version = field.NewInt(table, "version")
	p.EnvVars = field.NewField(table, "env_vars")
	p.Graph = field.NewField(table, "graph")

	p.fillFieldMap()

	return p
}

func (p *pipeCfg) WithContext(ctx context.Context) IPipeCfgDo { return p.pipeCfgDo.WithContext(ctx) }

func (p pipeCfg) TableName() string { return p.pipeCfgDo.TableName() }

func (p pipeCfg) Alias() string { return p.pipeCfgDo.Alias() }

func (p pipeCfg) Columns(cols ...field.Expr) gen.Columns { return p.pipeCfgDo.Columns(cols...) }

func (p *pipeCfg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pipeCfg) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.Id
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["name"] = p.Name
	p.fieldMap["space"] = p.Space
	p.fieldMap["desc"] = p.Desc
	p.fieldMap["version"] = p.Version
	p.fieldMap["env_vars"] = p.EnvVars
	p.fieldMap["graph"] = p.Graph
}

func (p pipeCfg) clone(db *gorm.DB) pipeCfg {
	p.pipeCfgDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pipeCfg) replaceDB(db *gorm.DB) pipeCfg {
	p.pipeCfgDo.ReplaceDB(db)
	return p
}

type pipeCfgDo struct{ gen.DO }

type IPipeCfgDo interface {
	gen.SubQuery
	Debug() IPipeCfgDo
	WithContext(ctx context.Context) IPipeCfgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPipeCfgDo
	WriteDB() IPipeCfgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPipeCfgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPipeCfgDo
	Not(conds ...gen.Condition) IPipeCfgDo
	Or(conds ...gen.Condition) IPipeCfgDo
	Select(conds ...field.Expr) IPipeCfgDo
	Where(conds ...gen.Condition) IPipeCfgDo
	Order(conds ...field.Expr) IPipeCfgDo
	Distinct(cols ...field.Expr) IPipeCfgDo
	Omit(cols ...field.Expr) IPipeCfgDo
	Join(table schema.Tabler, on ...field.Expr) IPipeCfgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPipeCfgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPipeCfgDo
	Group(cols ...field.Expr) IPipeCfgDo
	Having(conds ...gen.Condition) IPipeCfgDo
	Limit(limit int) IPipeCfgDo
	Offset(offset int) IPipeCfgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeCfgDo
	Unscoped() IPipeCfgDo
	Create(values ...*model.PipeCfg) error
	CreateInBatches(values []*model.PipeCfg, batchSize int) error
	Save(values ...*model.PipeCfg) error
	First() (*model.PipeCfg, error)
	Take() (*model.PipeCfg, error)
	Last() (*model.PipeCfg, error)
	Find() ([]*model.PipeCfg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeCfg, err error)
	FindInBatches(result *[]*model.PipeCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PipeCfg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPipeCfgDo
	Assign(attrs ...field.AssignExpr) IPipeCfgDo
	Joins(fields ...field.RelationField) IPipeCfgDo
	Preload(fields ...field.RelationField) IPipeCfgDo
	FirstOrInit() (*model.PipeCfg, error)
	FirstOrCreate() (*model.PipeCfg, error)
	FindByPage(offset int, limit int) (result []*model.PipeCfg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPipeCfgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pipeCfgDo) Debug() IPipeCfgDo {
	return p.withDO(p.DO.Debug())
}

func (p pipeCfgDo) WithContext(ctx context.Context) IPipeCfgDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pipeCfgDo) ReadDB() IPipeCfgDo {
	return p.Clauses(dbresolver.Read)
}

func (p pipeCfgDo) WriteDB() IPipeCfgDo {
	return p.Clauses(dbresolver.Write)
}

func (p pipeCfgDo) Session(config *gorm.Session) IPipeCfgDo {
	return p.withDO(p.DO.Session(config))
}

func (p pipeCfgDo) Clauses(conds ...clause.Expression) IPipeCfgDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pipeCfgDo) Returning(value interface{}, columns ...string) IPipeCfgDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pipeCfgDo) Not(conds ...gen.Condition) IPipeCfgDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pipeCfgDo) Or(conds ...gen.Condition) IPipeCfgDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pipeCfgDo) Select(conds ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pipeCfgDo) Where(conds ...gen.Condition) IPipeCfgDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pipeCfgDo) Order(conds ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pipeCfgDo) Distinct(cols ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pipeCfgDo) Omit(cols ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pipeCfgDo) Join(table schema.Tabler, on ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pipeCfgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pipeCfgDo) RightJoin(table schema.Tabler, on ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pipeCfgDo) Group(cols ...field.Expr) IPipeCfgDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pipeCfgDo) Having(conds ...gen.Condition) IPipeCfgDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pipeCfgDo) Limit(limit int) IPipeCfgDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pipeCfgDo) Offset(offset int) IPipeCfgDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pipeCfgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeCfgDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pipeCfgDo) Unscoped() IPipeCfgDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pipeCfgDo) Create(values ...*model.PipeCfg) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pipeCfgDo) CreateInBatches(values []*model.PipeCfg, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pipeCfgDo) Save(values ...*model.PipeCfg) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pipeCfgDo) First() (*model.PipeCfg, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeCfg), nil
	}
}

func (p pipeCfgDo) Take() (*model.PipeCfg, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeCfg), nil
	}
}

func (p pipeCfgDo) Last() (*model.PipeCfg, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeCfg), nil
	}
}

func (p pipeCfgDo) Find() ([]*model.PipeCfg, error) {
	result, err := p.DO.Find()
	return result.([]*model.PipeCfg), err
}

func (p pipeCfgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeCfg, err error) {
	buf := make([]*model.PipeCfg, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pipeCfgDo) FindInBatches(result *[]*model.PipeCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pipeCfgDo) Attrs(attrs ...field.AssignExpr) IPipeCfgDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pipeCfgDo) Assign(attrs ...field.AssignExpr) IPipeCfgDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pipeCfgDo) Joins(fields ...field.RelationField) IPipeCfgDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pipeCfgDo) Preload(fields ...field.RelationField) IPipeCfgDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pipeCfgDo) FirstOrInit() (*model.PipeCfg, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeCfg), nil
	}
}

func (p pipeCfgDo) FirstOrCreate() (*model.PipeCfg, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeCfg), nil
	}
}

func (p pipeCfgDo) FindByPage(offset int, limit int) (result []*model.PipeCfg, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pipeCfgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pipeCfgDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pipeCfgDo) Delete(models ...*model.PipeCfg) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pipeCfgDo) withDO(do gen.Dao) *pipeCfgDo {
	p.DO = *do.(*gen.DO)
	return p
}
