// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newNodeNamespace(db *gorm.DB, opts ...gen.DOOption) nodeNamespace {
	_nodeNamespace := nodeNamespace{}

	_nodeNamespace.nodeNamespaceDo.UseDB(db, opts...)
	_nodeNamespace.nodeNamespaceDo.UseModel(&model.NodeNamespace{})

	tableName := _nodeNamespace.nodeNamespaceDo.TableName()
	_nodeNamespace.ALL = field.NewAsterisk(tableName)
	_nodeNamespace.Id = field.NewInt64(tableName, "id")
	_nodeNamespace.CreatedAt = field.NewInt64(tableName, "created_at")
	_nodeNamespace.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_nodeNamespace.IsDel = field.NewBool(tableName, "is_del")
	_nodeNamespace.Namespace = field.NewString(tableName, "namespace")

	_nodeNamespace.fillFieldMap()

	return _nodeNamespace
}

type nodeNamespace struct {
	nodeNamespaceDo nodeNamespaceDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	IsDel     field.Bool
	Namespace field.String

	fieldMap map[string]field.Expr
}

func (n nodeNamespace) Table(newTableName string) *nodeNamespace {
	n.nodeNamespaceDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeNamespace) As(alias string) *nodeNamespace {
	n.nodeNamespaceDo.DO = *(n.nodeNamespaceDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeNamespace) updateTableName(table string) *nodeNamespace {
	n.ALL = field.NewAsterisk(table)
	n.Id = field.NewInt64(table, "id")
	n.CreatedAt = field.NewInt64(table, "created_at")
	n.UpdatedAt = field.NewInt64(table, "updated_at")
	n.IsDel = field.NewBool(table, "is_del")
	n.Namespace = field.NewString(table, "namespace")

	n.fillFieldMap()

	return n
}

func (n *nodeNamespace) WithContext(ctx context.Context) INodeNamespaceDo {
	return n.nodeNamespaceDo.WithContext(ctx)
}

func (n nodeNamespace) TableName() string { return n.nodeNamespaceDo.TableName() }

func (n nodeNamespace) Alias() string { return n.nodeNamespaceDo.Alias() }

func (n nodeNamespace) Columns(cols ...field.Expr) gen.Columns {
	return n.nodeNamespaceDo.Columns(cols...)
}

func (n *nodeNamespace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeNamespace) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 5)
	n.fieldMap["id"] = n.Id
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["is_del"] = n.IsDel
	n.fieldMap["namespace"] = n.Namespace
}

func (n nodeNamespace) clone(db *gorm.DB) nodeNamespace {
	n.nodeNamespaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeNamespace) replaceDB(db *gorm.DB) nodeNamespace {
	n.nodeNamespaceDo.ReplaceDB(db)
	return n
}

type nodeNamespaceDo struct{ gen.DO }

type INodeNamespaceDo interface {
	gen.SubQuery
	Debug() INodeNamespaceDo
	WithContext(ctx context.Context) INodeNamespaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeNamespaceDo
	WriteDB() INodeNamespaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeNamespaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeNamespaceDo
	Not(conds ...gen.Condition) INodeNamespaceDo
	Or(conds ...gen.Condition) INodeNamespaceDo
	Select(conds ...field.Expr) INodeNamespaceDo
	Where(conds ...gen.Condition) INodeNamespaceDo
	Order(conds ...field.Expr) INodeNamespaceDo
	Distinct(cols ...field.Expr) INodeNamespaceDo
	Omit(cols ...field.Expr) INodeNamespaceDo
	Join(table schema.Tabler, on ...field.Expr) INodeNamespaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeNamespaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeNamespaceDo
	Group(cols ...field.Expr) INodeNamespaceDo
	Having(conds ...gen.Condition) INodeNamespaceDo
	Limit(limit int) INodeNamespaceDo
	Offset(offset int) INodeNamespaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeNamespaceDo
	Unscoped() INodeNamespaceDo
	Create(values ...*model.NodeNamespace) error
	CreateInBatches(values []*model.NodeNamespace, batchSize int) error
	Save(values ...*model.NodeNamespace) error
	First() (*model.NodeNamespace, error)
	Take() (*model.NodeNamespace, error)
	Last() (*model.NodeNamespace, error)
	Find() ([]*model.NodeNamespace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeNamespace, err error)
	FindInBatches(result *[]*model.NodeNamespace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeNamespace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeNamespaceDo
	Assign(attrs ...field.AssignExpr) INodeNamespaceDo
	Joins(fields ...field.RelationField) INodeNamespaceDo
	Preload(fields ...field.RelationField) INodeNamespaceDo
	FirstOrInit() (*model.NodeNamespace, error)
	FirstOrCreate() (*model.NodeNamespace, error)
	FindByPage(offset int, limit int) (result []*model.NodeNamespace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeNamespaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeNamespaceDo) Debug() INodeNamespaceDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeNamespaceDo) WithContext(ctx context.Context) INodeNamespaceDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeNamespaceDo) ReadDB() INodeNamespaceDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeNamespaceDo) WriteDB() INodeNamespaceDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeNamespaceDo) Session(config *gorm.Session) INodeNamespaceDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeNamespaceDo) Clauses(conds ...clause.Expression) INodeNamespaceDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeNamespaceDo) Returning(value interface{}, columns ...string) INodeNamespaceDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeNamespaceDo) Not(conds ...gen.Condition) INodeNamespaceDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeNamespaceDo) Or(conds ...gen.Condition) INodeNamespaceDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeNamespaceDo) Select(conds ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeNamespaceDo) Where(conds ...gen.Condition) INodeNamespaceDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeNamespaceDo) Order(conds ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeNamespaceDo) Distinct(cols ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeNamespaceDo) Omit(cols ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeNamespaceDo) Join(table schema.Tabler, on ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeNamespaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeNamespaceDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeNamespaceDo) Group(cols ...field.Expr) INodeNamespaceDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeNamespaceDo) Having(conds ...gen.Condition) INodeNamespaceDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeNamespaceDo) Limit(limit int) INodeNamespaceDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeNamespaceDo) Offset(offset int) INodeNamespaceDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeNamespaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeNamespaceDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeNamespaceDo) Unscoped() INodeNamespaceDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeNamespaceDo) Create(values ...*model.NodeNamespace) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeNamespaceDo) CreateInBatches(values []*model.NodeNamespace, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeNamespaceDo) Save(values ...*model.NodeNamespace) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeNamespaceDo) First() (*model.NodeNamespace, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeNamespace), nil
	}
}

func (n nodeNamespaceDo) Take() (*model.NodeNamespace, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeNamespace), nil
	}
}

func (n nodeNamespaceDo) Last() (*model.NodeNamespace, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeNamespace), nil
	}
}

func (n nodeNamespaceDo) Find() ([]*model.NodeNamespace, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeNamespace), err
}

func (n nodeNamespaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeNamespace, err error) {
	buf := make([]*model.NodeNamespace, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeNamespaceDo) FindInBatches(result *[]*model.NodeNamespace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeNamespaceDo) Attrs(attrs ...field.AssignExpr) INodeNamespaceDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeNamespaceDo) Assign(attrs ...field.AssignExpr) INodeNamespaceDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeNamespaceDo) Joins(fields ...field.RelationField) INodeNamespaceDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeNamespaceDo) Preload(fields ...field.RelationField) INodeNamespaceDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeNamespaceDo) FirstOrInit() (*model.NodeNamespace, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeNamespace), nil
	}
}

func (n nodeNamespaceDo) FirstOrCreate() (*model.NodeNamespace, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeNamespace), nil
	}
}

func (n nodeNamespaceDo) FindByPage(offset int, limit int) (result []*model.NodeNamespace, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeNamespaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeNamespaceDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeNamespaceDo) Delete(models ...*model.NodeNamespace) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeNamespaceDo) withDO(do gen.Dao) *nodeNamespaceDo {
	n.DO = *do.(*gen.DO)
	return n
}
