// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newNodeCfg(db *gorm.DB, opts ...gen.DOOption) nodeCfg {
	_nodeCfg := nodeCfg{}

	_nodeCfg.nodeCfgDo.UseDB(db, opts...)
	_nodeCfg.nodeCfgDo.UseModel(&model.NodeCfg{})

	tableName := _nodeCfg.nodeCfgDo.TableName()
	_nodeCfg.ALL = field.NewAsterisk(tableName)
	_nodeCfg.Id = field.NewInt64(tableName, "id")
	_nodeCfg.CreatedAt = field.NewInt64(tableName, "created_at")
	_nodeCfg.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_nodeCfg.IsDel = field.NewBool(tableName, "is_del")
	_nodeCfg.Name = field.NewString(tableName, "name")
	_nodeCfg.Desc = field.NewString(tableName, "desc")
	_nodeCfg.PipeCfgId = field.NewInt64(tableName, "pipe_cfg_id")
	_nodeCfg.InDegree = field.NewInt(tableName, "in_degree")
	_nodeCfg.Spec = field.NewBytes(tableName, "spec")

	_nodeCfg.fillFieldMap()

	return _nodeCfg
}

type nodeCfg struct {
	nodeCfgDo nodeCfgDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	IsDel     field.Bool
	Name      field.String
	Desc      field.String
	PipeCfgId field.Int64
	InDegree  field.Int
	Spec      field.Bytes

	fieldMap map[string]field.Expr
}

func (n nodeCfg) Table(newTableName string) *nodeCfg {
	n.nodeCfgDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeCfg) As(alias string) *nodeCfg {
	n.nodeCfgDo.DO = *(n.nodeCfgDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeCfg) updateTableName(table string) *nodeCfg {
	n.ALL = field.NewAsterisk(table)
	n.Id = field.NewInt64(table, "id")
	n.CreatedAt = field.NewInt64(table, "created_at")
	n.UpdatedAt = field.NewInt64(table, "updated_at")
	n.IsDel = field.NewBool(table, "is_del")
	n.Name = field.NewString(table, "name")
	n.Desc = field.NewString(table, "desc")
	n.PipeCfgId = field.NewInt64(table, "pipe_cfg_id")
	n.InDegree = field.NewInt(table, "in_degree")
	n.Spec = field.NewBytes(table, "spec")

	n.fillFieldMap()

	return n
}

func (n *nodeCfg) WithContext(ctx context.Context) INodeCfgDo { return n.nodeCfgDo.WithContext(ctx) }

func (n nodeCfg) TableName() string { return n.nodeCfgDo.TableName() }

func (n nodeCfg) Alias() string { return n.nodeCfgDo.Alias() }

func (n nodeCfg) Columns(cols ...field.Expr) gen.Columns { return n.nodeCfgDo.Columns(cols...) }

func (n *nodeCfg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeCfg) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 9)
	n.fieldMap["id"] = n.Id
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["is_del"] = n.IsDel
	n.fieldMap["name"] = n.Name
	n.fieldMap["desc"] = n.Desc
	n.fieldMap["pipe_cfg_id"] = n.PipeCfgId
	n.fieldMap["in_degree"] = n.InDegree
	n.fieldMap["spec"] = n.Spec
}

func (n nodeCfg) clone(db *gorm.DB) nodeCfg {
	n.nodeCfgDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeCfg) replaceDB(db *gorm.DB) nodeCfg {
	n.nodeCfgDo.ReplaceDB(db)
	return n
}

type nodeCfgDo struct{ gen.DO }

type INodeCfgDo interface {
	gen.SubQuery
	Debug() INodeCfgDo
	WithContext(ctx context.Context) INodeCfgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeCfgDo
	WriteDB() INodeCfgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeCfgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeCfgDo
	Not(conds ...gen.Condition) INodeCfgDo
	Or(conds ...gen.Condition) INodeCfgDo
	Select(conds ...field.Expr) INodeCfgDo
	Where(conds ...gen.Condition) INodeCfgDo
	Order(conds ...field.Expr) INodeCfgDo
	Distinct(cols ...field.Expr) INodeCfgDo
	Omit(cols ...field.Expr) INodeCfgDo
	Join(table schema.Tabler, on ...field.Expr) INodeCfgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeCfgDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeCfgDo
	Group(cols ...field.Expr) INodeCfgDo
	Having(conds ...gen.Condition) INodeCfgDo
	Limit(limit int) INodeCfgDo
	Offset(offset int) INodeCfgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeCfgDo
	Unscoped() INodeCfgDo
	Create(values ...*model.NodeCfg) error
	CreateInBatches(values []*model.NodeCfg, batchSize int) error
	Save(values ...*model.NodeCfg) error
	First() (*model.NodeCfg, error)
	Take() (*model.NodeCfg, error)
	Last() (*model.NodeCfg, error)
	Find() ([]*model.NodeCfg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeCfg, err error)
	FindInBatches(result *[]*model.NodeCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeCfg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeCfgDo
	Assign(attrs ...field.AssignExpr) INodeCfgDo
	Joins(fields ...field.RelationField) INodeCfgDo
	Preload(fields ...field.RelationField) INodeCfgDo
	FirstOrInit() (*model.NodeCfg, error)
	FirstOrCreate() (*model.NodeCfg, error)
	FindByPage(offset int, limit int) (result []*model.NodeCfg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeCfgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeCfgDo) Debug() INodeCfgDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeCfgDo) WithContext(ctx context.Context) INodeCfgDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeCfgDo) ReadDB() INodeCfgDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeCfgDo) WriteDB() INodeCfgDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeCfgDo) Session(config *gorm.Session) INodeCfgDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeCfgDo) Clauses(conds ...clause.Expression) INodeCfgDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeCfgDo) Returning(value interface{}, columns ...string) INodeCfgDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeCfgDo) Not(conds ...gen.Condition) INodeCfgDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeCfgDo) Or(conds ...gen.Condition) INodeCfgDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeCfgDo) Select(conds ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeCfgDo) Where(conds ...gen.Condition) INodeCfgDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeCfgDo) Order(conds ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeCfgDo) Distinct(cols ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeCfgDo) Omit(cols ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeCfgDo) Join(table schema.Tabler, on ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeCfgDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeCfgDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeCfgDo) Group(cols ...field.Expr) INodeCfgDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeCfgDo) Having(conds ...gen.Condition) INodeCfgDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeCfgDo) Limit(limit int) INodeCfgDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeCfgDo) Offset(offset int) INodeCfgDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeCfgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeCfgDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeCfgDo) Unscoped() INodeCfgDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeCfgDo) Create(values ...*model.NodeCfg) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeCfgDo) CreateInBatches(values []*model.NodeCfg, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeCfgDo) Save(values ...*model.NodeCfg) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeCfgDo) First() (*model.NodeCfg, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeCfg), nil
	}
}

func (n nodeCfgDo) Take() (*model.NodeCfg, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeCfg), nil
	}
}

func (n nodeCfgDo) Last() (*model.NodeCfg, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeCfg), nil
	}
}

func (n nodeCfgDo) Find() ([]*model.NodeCfg, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeCfg), err
}

func (n nodeCfgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeCfg, err error) {
	buf := make([]*model.NodeCfg, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeCfgDo) FindInBatches(result *[]*model.NodeCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeCfgDo) Attrs(attrs ...field.AssignExpr) INodeCfgDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeCfgDo) Assign(attrs ...field.AssignExpr) INodeCfgDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeCfgDo) Joins(fields ...field.RelationField) INodeCfgDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeCfgDo) Preload(fields ...field.RelationField) INodeCfgDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeCfgDo) FirstOrInit() (*model.NodeCfg, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeCfg), nil
	}
}

func (n nodeCfgDo) FirstOrCreate() (*model.NodeCfg, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeCfg), nil
	}
}

func (n nodeCfgDo) FindByPage(offset int, limit int) (result []*model.NodeCfg, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeCfgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeCfgDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeCfgDo) Delete(models ...*model.NodeCfg) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeCfgDo) withDO(do gen.Dao) *nodeCfgDo {
	n.DO = *do.(*gen.DO)
	return n
}
