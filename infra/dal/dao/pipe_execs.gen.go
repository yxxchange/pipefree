// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yxxchange/pipefree/infra/dal/model"
)

func newPipeExec(db *gorm.DB, opts ...gen.DOOption) pipeExec {
	_pipeExec := pipeExec{}

	_pipeExec.pipeExecDo.UseDB(db, opts...)
	_pipeExec.pipeExecDo.UseModel(&model.PipeExec{})

	tableName := _pipeExec.pipeExecDo.TableName()
	_pipeExec.ALL = field.NewAsterisk(tableName)
	_pipeExec.Id = field.NewInt64(tableName, "id")
	_pipeExec.CreatedAt = field.NewInt64(tableName, "created_at")
	_pipeExec.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pipeExec.IsDel = field.NewBool(tableName, "is_del")
	_pipeExec.PipeCfgId = field.NewInt64(tableName, "pipe_cfg_id")
	_pipeExec.Version = field.NewInt(tableName, "version")
	_pipeExec.Graph = field.NewField(tableName, "graph")
	_pipeExec.EnvVars = field.NewField(tableName, "env_vars")
	_pipeExec.State = field.NewInt(tableName, "state")

	_pipeExec.fillFieldMap()

	return _pipeExec
}

type pipeExec struct {
	pipeExecDo pipeExecDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	IsDel     field.Bool
	PipeCfgId field.Int64
	Version   field.Int
	Graph     field.Field
	EnvVars   field.Field
	State     field.Int

	fieldMap map[string]field.Expr
}

func (p pipeExec) Table(newTableName string) *pipeExec {
	p.pipeExecDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pipeExec) As(alias string) *pipeExec {
	p.pipeExecDo.DO = *(p.pipeExecDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pipeExec) updateTableName(table string) *pipeExec {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewInt64(table, "id")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.IsDel = field.NewBool(table, "is_del")
	p.PipeCfgId = field.NewInt64(table, "pipe_cfg_id")
	p.Version = field.NewInt(table, "version")
	p.Graph = field.NewField(table, "graph")
	p.EnvVars = field.NewField(table, "env_vars")
	p.State = field.NewInt(table, "state")

	p.fillFieldMap()

	return p
}

func (p *pipeExec) WithContext(ctx context.Context) IPipeExecDo { return p.pipeExecDo.WithContext(ctx) }

func (p pipeExec) TableName() string { return p.pipeExecDo.TableName() }

func (p pipeExec) Alias() string { return p.pipeExecDo.Alias() }

func (p pipeExec) Columns(cols ...field.Expr) gen.Columns { return p.pipeExecDo.Columns(cols...) }

func (p *pipeExec) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pipeExec) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.Id
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["pipe_cfg_id"] = p.PipeCfgId
	p.fieldMap["version"] = p.Version
	p.fieldMap["graph"] = p.Graph
	p.fieldMap["env_vars"] = p.EnvVars
	p.fieldMap["state"] = p.State
}

func (p pipeExec) clone(db *gorm.DB) pipeExec {
	p.pipeExecDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pipeExec) replaceDB(db *gorm.DB) pipeExec {
	p.pipeExecDo.ReplaceDB(db)
	return p
}

type pipeExecDo struct{ gen.DO }

type IPipeExecDo interface {
	gen.SubQuery
	Debug() IPipeExecDo
	WithContext(ctx context.Context) IPipeExecDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPipeExecDo
	WriteDB() IPipeExecDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPipeExecDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPipeExecDo
	Not(conds ...gen.Condition) IPipeExecDo
	Or(conds ...gen.Condition) IPipeExecDo
	Select(conds ...field.Expr) IPipeExecDo
	Where(conds ...gen.Condition) IPipeExecDo
	Order(conds ...field.Expr) IPipeExecDo
	Distinct(cols ...field.Expr) IPipeExecDo
	Omit(cols ...field.Expr) IPipeExecDo
	Join(table schema.Tabler, on ...field.Expr) IPipeExecDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPipeExecDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPipeExecDo
	Group(cols ...field.Expr) IPipeExecDo
	Having(conds ...gen.Condition) IPipeExecDo
	Limit(limit int) IPipeExecDo
	Offset(offset int) IPipeExecDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeExecDo
	Unscoped() IPipeExecDo
	Create(values ...*model.PipeExec) error
	CreateInBatches(values []*model.PipeExec, batchSize int) error
	Save(values ...*model.PipeExec) error
	First() (*model.PipeExec, error)
	Take() (*model.PipeExec, error)
	Last() (*model.PipeExec, error)
	Find() ([]*model.PipeExec, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeExec, err error)
	FindInBatches(result *[]*model.PipeExec, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PipeExec) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPipeExecDo
	Assign(attrs ...field.AssignExpr) IPipeExecDo
	Joins(fields ...field.RelationField) IPipeExecDo
	Preload(fields ...field.RelationField) IPipeExecDo
	FirstOrInit() (*model.PipeExec, error)
	FirstOrCreate() (*model.PipeExec, error)
	FindByPage(offset int, limit int) (result []*model.PipeExec, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPipeExecDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pipeExecDo) Debug() IPipeExecDo {
	return p.withDO(p.DO.Debug())
}

func (p pipeExecDo) WithContext(ctx context.Context) IPipeExecDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pipeExecDo) ReadDB() IPipeExecDo {
	return p.Clauses(dbresolver.Read)
}

func (p pipeExecDo) WriteDB() IPipeExecDo {
	return p.Clauses(dbresolver.Write)
}

func (p pipeExecDo) Session(config *gorm.Session) IPipeExecDo {
	return p.withDO(p.DO.Session(config))
}

func (p pipeExecDo) Clauses(conds ...clause.Expression) IPipeExecDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pipeExecDo) Returning(value interface{}, columns ...string) IPipeExecDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pipeExecDo) Not(conds ...gen.Condition) IPipeExecDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pipeExecDo) Or(conds ...gen.Condition) IPipeExecDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pipeExecDo) Select(conds ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pipeExecDo) Where(conds ...gen.Condition) IPipeExecDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pipeExecDo) Order(conds ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pipeExecDo) Distinct(cols ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pipeExecDo) Omit(cols ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pipeExecDo) Join(table schema.Tabler, on ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pipeExecDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pipeExecDo) RightJoin(table schema.Tabler, on ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pipeExecDo) Group(cols ...field.Expr) IPipeExecDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pipeExecDo) Having(conds ...gen.Condition) IPipeExecDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pipeExecDo) Limit(limit int) IPipeExecDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pipeExecDo) Offset(offset int) IPipeExecDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pipeExecDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPipeExecDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pipeExecDo) Unscoped() IPipeExecDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pipeExecDo) Create(values ...*model.PipeExec) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pipeExecDo) CreateInBatches(values []*model.PipeExec, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pipeExecDo) Save(values ...*model.PipeExec) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pipeExecDo) First() (*model.PipeExec, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeExec), nil
	}
}

func (p pipeExecDo) Take() (*model.PipeExec, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeExec), nil
	}
}

func (p pipeExecDo) Last() (*model.PipeExec, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeExec), nil
	}
}

func (p pipeExecDo) Find() ([]*model.PipeExec, error) {
	result, err := p.DO.Find()
	return result.([]*model.PipeExec), err
}

func (p pipeExecDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PipeExec, err error) {
	buf := make([]*model.PipeExec, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pipeExecDo) FindInBatches(result *[]*model.PipeExec, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pipeExecDo) Attrs(attrs ...field.AssignExpr) IPipeExecDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pipeExecDo) Assign(attrs ...field.AssignExpr) IPipeExecDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pipeExecDo) Joins(fields ...field.RelationField) IPipeExecDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pipeExecDo) Preload(fields ...field.RelationField) IPipeExecDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pipeExecDo) FirstOrInit() (*model.PipeExec, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeExec), nil
	}
}

func (p pipeExecDo) FirstOrCreate() (*model.PipeExec, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PipeExec), nil
	}
}

func (p pipeExecDo) FindByPage(offset int, limit int) (result []*model.PipeExec, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pipeExecDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pipeExecDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pipeExecDo) Delete(models ...*model.PipeExec) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pipeExecDo) withDO(do gen.Dao) *pipeExecDo {
	p.DO = *do.(*gen.DO)
	return p
}
